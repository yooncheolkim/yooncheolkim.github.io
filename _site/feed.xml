<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>헤딩한 내용들</title>
		<description>Software Developer</description>
		<link></link>
		<atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>auth 인증 프로세스</title>
				<description>&lt;h3 id=&quot;인증-프로세스-개발&quot;&gt;인증 프로세스 개발&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;프로젝트 진행하면서, 기본적인 인증 프로세스는 아키텍쳐께서 잡아주셨다.&lt;/li&gt;
  &lt;li&gt;하지만, 실제로 구현은 개발자가 해야했기때문에,, 인증 전반적인 프로세스와 중요 포인트를 정리한다.&lt;/li&gt;
  &lt;li&gt;인증 프로세스 전반이 왜 이렇게 설계 되었는지 정확히 이해되진 않지만, 각 데이터들의 역할을 파악하여 정리하였다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;wip-기본-인증-프로세스&quot;&gt;[WIP] 기본 인증 프로세스&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://drive.google.com/file/d/1V7keSAh4EyD0qE__YGn5g4t_ZBCqAgur/view?usp=sharing&quot;&gt;인증프로세스 다이어그램&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;cognito에서 생성된 accessToken, refreshToken은 client에 내려주지 않는다.&lt;/li&gt;
  &lt;li&gt;cognito에서 생성된 accessToken과 refreshToken은 감춘채로, idToken을 accessToken처럼 관리하여, 인증프로세스를 구현한듯하다…&lt;/li&gt;
  &lt;li&gt;redis에 (key : idToken, value : accessToken, refreshToken)을 관리하고, idToken과 refreshId라는 uuid를 생성하여 client에 전달하도록 설계 되어있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;재인증-관련&quot;&gt;재인증 관련&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;idToken을 accessToken으로 생각하자.&lt;/li&gt;
  &lt;li&gt;redis에 accessToken을 key로 저장하지만, 이것만 저장하면 안된다.&lt;/li&gt;
  &lt;li&gt;보통 보안을 위해, accessToken의 expired기간을 짧게 가져가고, 재인증을 위해 refreshToken을 사용하여, cognito에 accessToken을 재요청한다.&lt;/li&gt;
  &lt;li&gt;이때 우리는 redis에 (key : accessToken, value : refreshToken) 으로 저장하도록 했기 때문에, 이 key/value가 만료되면, refreshToken까지 사라져 버린다.&lt;/li&gt;
  &lt;li&gt;그렇다고 refreshToken까지 client에 내려주면, token 탈취자도 계속해서 재인증을 할 수 있기 때문에, 이것은 보안상 문제가 된다.&lt;/li&gt;
  &lt;li&gt;그래서, redis에 accessToken과 refreshToken을 저장할때 다음과 같이 두개의 key/value를 저장하도록 설계 되었다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// redis key/value&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;accessToken&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;refreshToken, id 등등 변하지 않는 부가 정보&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;re_accessToken&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;refreshToken, id 등등 변하지 않는 부가 정보&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;accessToken은 만료기간이 짧은 key 이고, re_accessToken 만료기간이 긴 key라면, accessToken이 만료되더라도, re_accessToken로 refreshToken을 가져와서 재인증 절차를 진행할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;결론&quot;&gt;결론&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;인증 서버 구현은 어떻게 구성하고 개발할건지 정답이 없다. 설계하기 나름이다.&lt;/li&gt;
  &lt;li&gt;아키텍처께서 먼저 프로젝트 철수하셔서, 정확히 왜 이렇게 설계 하셨는지 물어볼 수 없었다. 다음에는 꼭 물어봐야지…&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Thu, 08 Dec 2022 13:30:00 +0900</pubDate>
				<link>/2022/12/auth-process/</link>
				<guid isPermaLink="true">/2022/12/auth-process/</guid>
			</item>
		
			<item>
				<title>deadlock 경험기</title>
				<description>&lt;h3 id=&quot;프로젝트에서-deadlock-경험기&quot;&gt;프로젝트에서 deadlock 경험기.&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;다른 도메인에서 deadlock이 발생하여, 관찰(?)한 경험담을 작성한다.&lt;/li&gt;
  &lt;li&gt;오픈하고, 이벤트가 있는날, deadlock이 발생하였다.&lt;/li&gt;
  &lt;li&gt;Deadlock found when trying to get lock; try restarting transaction&lt;/li&gt;
  &lt;li&gt;db는 mysql(read-commited), application 서버는 spring,jpa를 사용하고 있었다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;db말고-애플리케이션에서는&quot;&gt;DB말고, 애플리케이션에서는?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;java의 synchronized를 이용하여, lock을 잡아, 멀티스레드 환경에서 deadlock 상황을 재현할 수 있다.&lt;br /&gt;
```java&lt;br /&gt;
…&lt;br /&gt;
// 1번 스레드&lt;br /&gt;
          synchronized (object1){&lt;br /&gt;
              try {&lt;br /&gt;
                  Thread.sleep(10);&lt;br /&gt;
              } catch (InterruptedException e) {&lt;br /&gt;
                  e.printStackTrace();&lt;br /&gt;
              }&lt;br /&gt;
              synchronized (object2){&lt;br /&gt;
              }&lt;br /&gt;
          }&lt;br /&gt;
// 2번 쓰레드&lt;br /&gt;
          synchronized (object2){&lt;br /&gt;
              try {&lt;br /&gt;
                  Thread.sleep(10);&lt;br /&gt;
              } catch (InterruptedException e) {&lt;br /&gt;
                  e.printStackTrace();&lt;br /&gt;
              }&lt;br /&gt;
              synchronized (object1){&lt;br /&gt;
              }&lt;br /&gt;
          }&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;```&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;두 스레드를 실행시키면, object1과 object2를 lock을 획득하려고 하면서, deadlock상황이 발생한다.&lt;/li&gt;
  &lt;li&gt;사실, 애플리케이션 + db 상황에서도 트랜잭션과 db lock의 개념이 추가되는거지 크게는 이 예시와 다를게 없다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;db에서-lock&quot;&gt;db에서 lock&lt;/h3&gt;

&lt;h4 id=&quot;테이블-구조&quot;&gt;테이블 구조&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Parent와 자식 테이블 Child가 존재한다.&lt;/li&gt;
  &lt;li&gt;Parent 하나에 N개의 Child가 존재하는데, 실제 1개의 Parent에 1000개의 Child가 존재한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;로직순서&quot;&gt;로직순서&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;A 트랜잭션 begin&lt;/li&gt;
  &lt;li&gt;A 트랜잭션, native query로 Parent 테이블 update&lt;/li&gt;
  &lt;li&gt;B 트랜잭션 begin&lt;/li&gt;
  &lt;li&gt;B 트랜잭션, native query로 Child update, Parent 테이블 update&lt;/li&gt;
  &lt;li&gt;B 트랜잭션, Parent 테이블 update하고 싶지만 A 트랜잭션이 lock 잡고 있어서, wait&lt;/li&gt;
  &lt;li&gt;A 트랜잭션, Child update.&lt;/li&gt;
  &lt;li&gt;A 트랜잭션, Child update 하려고 하지만, B 트랜잭션이 lock 잡고 잇어서, wait&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;synchronized로 재현한 구조와 같다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;deadlock-회피-방법-1&quot;&gt;deadlock 회피 방법 1&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;해당 구조에서 deadlock을 만들고 싶지 않다면 가장 쉬운 방법으로, A 트랜잭션에서 시작시점에 Parent 를 select for update 하는것이다.&lt;/li&gt;
  &lt;li&gt;select for update는 배타 락. 다른 트랜잭션에서 쓰기는 물론 읽기도 불가능하다.&lt;/li&gt;
  &lt;li&gt;select for update 하면, 다른 트랜잭션에서 read도 할 수 없으므로, 보통 서비스 로직을 select - update 로 구성하는 경우, deadlock을 회피할 수 있다.&lt;/li&gt;
  &lt;li&gt;하지만 동시성이 많이 떨어지게 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;deadlock-회피-방법-2&quot;&gt;deadlock 회피 방법 2&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Parent 테이블 update를 가장 뒤로 미룬다.&lt;/li&gt;
  &lt;li&gt;트랜잭션 로직의 순서가 다음과 같다고 가정하자.(보통 별 생각없이 진행하면 이렇게 된다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Parent select 및 validation&lt;/li&gt;
  &lt;li&gt;Parent update&lt;/li&gt;
  &lt;li&gt;Child select 및 validation&lt;/li&gt;
  &lt;li&gt;Child update (이때 Child 테이블의 수많은 row를 update하고 validation 한다면?)&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;테이블 구조상, Parent 테이블 1 row 당, Child 테이블 은 N row로 구성된다.&lt;/li&gt;
  &lt;li&gt;Child 테이블의 validation + update 작업은 Parent validation + update 작업보다 클것이다.&lt;/li&gt;
  &lt;li&gt;이 경우, Child 테이블을 먼저 update하도록 로직의 순서를 바꾸는게, lock을 최소화 할수 있을 것이다. (만약, jpa의 변경감지를 이용한다면, 크게 신경쓰지 않아도 될듯?)&lt;/li&gt;
  &lt;li&gt;그리고 보통 Child 테이블 보다, Parent 테이블이 여러 서비스 로직+ 트랜잭션에서 접근하기 때문에, Parent 테이블의 lock을 최소화 하는것이 중요하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;deadlock-회피-방법-3&quot;&gt;deadlock 회피 방법 3&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;트랜잭션을 포함하고 있는, 서비스 로직 중간에 오래 걸리는 작업(외부 api 호출 등등)이 있지 않은지 확인하자.&lt;/li&gt;
  &lt;li&gt;이런 작업이 존재한다면, 적절히 트랜잭션을 분리하는게 옳은 방법이다.&lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Mon, 28 Nov 2022 21:30:00 +0900</pubDate>
				<link>/2022/11/deadlock-1/</link>
				<guid isPermaLink="true">/2022/11/deadlock-1/</guid>
			</item>
		
			<item>
				<title>browser storage 와 token 공유</title>
				<description>&lt;h3 id=&quot;browser-session-storage와-local-storage&quot;&gt;browser session storage와 local storage&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;local storage 특징
    &lt;ul&gt;
      &lt;li&gt;브라우저 닫고 켜도 유지됨&lt;/li&gt;
      &lt;li&gt;도메인 별로 관리됨, 다른 도메인에서 접근 불가&lt;/li&gt;
      &lt;li&gt;탭간 공유 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;session storage 특징
    &lt;ul&gt;
      &lt;li&gt;브라우저 닫고 키면 사라짐&lt;/li&gt;
      &lt;li&gt;브라우저 탭간 공유 불가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;탭간-session-storage-공유하기&quot;&gt;탭간 session storage 공유하기&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;token같은 정보를 sessino storage에 저장해 두었다면, 다른 탭에서는 해당 내용을 볼수 없으니, 로그인 상태도 유지할 수 없다.&lt;/li&gt;
  &lt;li&gt;session storage에 token 생성/삭제 상태를 다른 탭에 공유하여야한다.&lt;/li&gt;
  &lt;li&gt;eventListenr 중에 ‘storage’ 이벤트가 존재하는데, local storage가 변경되면 발생하는 이벤트이다.&lt;/li&gt;
  &lt;li&gt;이 이벤트를 사용하여, token 삭제/생성 등 상태를 공유하여, 탭간 세션 공유를 구현할 수 있다. (publish / subscribe 동작)&lt;/li&gt;
  &lt;li&gt;그리고, local storage로 token 를 공유해야하므로, local storage로 전달하고, 바로 삭제해야, 보안상 문제가 발생하지 않는다.&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Sat, 29 Oct 2022 14:00:00 +0900</pubDate>
				<link>/2022/10/browser-storage/</link>
				<guid isPermaLink="true">/2022/10/browser-storage/</guid>
			</item>
		
			<item>
				<title>spring jpa save와 saveAll 그리고 batch insert(with transaction)</title>
				<description>&lt;h3 id=&quot;transactional-동작과정-with-프록시&quot;&gt;@Transactional 동작과정 with 프록시&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;TransactionAspectSupport에서 빈으로 등록된 transacitonManger를 통해 begin, commit, rollback 한다. 이과정을 프록시를 통한 함수 호출 과정, 프록시 과정이라고 하자.&lt;/li&gt;
  &lt;li&gt;컨트롤러에서 @Transactinal이 붙은 함수를 호출하거나, save를 호출하면, 에서 프록시 과정을 통한다. save도 @Transactional이 붙어있다.&lt;/li&gt;
  &lt;li&gt;즉, 외부 호출을 통한 @Transactional 호출은 프록시 과정을 거친다.&lt;/li&gt;
  &lt;li&gt;하지만, this 에 존재하는 @Transactional 함수 호출은 프록시 과정을 거치지 않게 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;save와-saveall-차이&quot;&gt;save와 saveAll 차이&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;여기서 save, saveAll 둘다 @Transactional 이 붙어 있어, 외부에서 호출되었을 경우, 프록시 과정을 거치게된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

		&lt;span class=&quot;nc&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Entity must not be null.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entityInformation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isNew&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;persist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;saveAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entities&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

		&lt;span class=&quot;nc&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entities&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Entities must not be null!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entities&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;만약에 service 에서 for문을 통해 여러 entity를 save 하게 되면, 매번 save 호출 시 마다, 프록시 과정을 통하지만,&lt;/li&gt;
  &lt;li&gt;entity list를 만들어서, saveAll을 하게 되면, saveAll 호출 -&amp;gt; 내부 save 호출 이기 때문에, saveAll내부의 save 과정에서는 프록시 과정을 거치지 않게 된다.&lt;/li&gt;
  &lt;li&gt;이 과정에서 시간차이가 많이 나게 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;batch-insert&quot;&gt;batch insert&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;hibernat.jdbc.batch_size 를 설정하면, 여러건의 insert를 모아서 한번에 보낼수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;문제 상황, id 생성 전략을 Identity로 해놓았을 경우, batch insert 기능을 사용할 수 없다.&lt;/li&gt;
  &lt;li&gt;이유는, jpa는 쓰기 지연으로 동작한다.(write 작업을 모아두었다가, transaciton commit 전에 한번에 쓰는방법)&lt;/li&gt;
  &lt;li&gt;그러므로, auto_increment로 설정해놓으면, 실제 insert 하기전에는 해당 entity의 실제 id값을 알수가 없다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;그런 이유로, identity 전략으로 생성된 entity의 batch insert를 지원하지 않는다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/27697810/why-does-hibernate-disable-insert-batching-when-using-an-identity-identifier-gen&quot;&gt;jpa의 identity id 생성 전략과 batch insert&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://techblog.woowahan.com/2663&quot;&gt;jpa의 table id 생성 전략과 transaction 문제&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;참고-spring-transactional-구조&quot;&gt;참고. spring transactional 구조&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;가장 상위에 PlatformTransactionManager interface를 가지고 있다.&lt;/li&gt;
  &lt;li&gt;PlatformTransactionManager를 구현한 AbstractPlatformTransactionManager 추상 클래스가 있고, datasource(직접 jdbc 사용), jpa, hibernate TransacitonManager들은 AbstractPlatformTransactionManager을 구현하고 있다.&lt;/li&gt;
  &lt;li&gt;spirng boot autoconfigure의 JpaBaseConfiguration 에서 bean등록해주고 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;참고-spring-의-transactionmanager&quot;&gt;참고. spring 의 transactionManager&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;@Transactional 메소드가 호출될때, TransactionAspectSupport의 determineTransactionManager에서 프로젝트에 등록된 TransactionManager 빈을 가져와서 처리한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TransactionManager&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;determineTransactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TransactionAttribute&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txAttr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nc&quot;&gt;TransactionManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultTransactionManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getTransactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;defaultTransactionManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;defaultTransactionManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;transactionManagerCache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DEFAULT_TRANSACTION_MANAGER_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;defaultTransactionManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;defaultTransactionManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TransactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;spring-transactional-새로운-트랜잭션-만들기&quot;&gt;spring transactional 새로운 트랜잭션 만들기&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;@Transactional propagation attribute 을 통해 부모의 트랜잭션에 합류할건지, 새로운 트랜잭션을 만들건지 선택할 수 있다.&lt;/li&gt;
  &lt;li&gt;TransactionAspectSupport 에서 attribute를 확인하여, 새로운 트랙잭션을 만들지 결정한다.&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Sun, 23 Oct 2022 12:30:00 +0900</pubDate>
				<link>/2022/10/jpa-bulk-insert-copy/</link>
				<guid isPermaLink="true">/2022/10/jpa-bulk-insert-copy/</guid>
			</item>
		
			<item>
				<title>jpa persist merge</title>
				<description>&lt;h3 id=&quot;savepersist-merge와-isnew&quot;&gt;save(persist, merge)와 isNew&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;save를 하면, jpa는 저장하려는 entity가 isNew 인지 확인하여, isNew라면 persist를 호출하고, 아니라면 merge를 진행한다.&lt;/li&gt;
  &lt;li&gt;persist : 최초 생성된 entity를 영속화 한다.&lt;/li&gt;
  &lt;li&gt;merge : 식별자값(id)로 1차 캐시에서 조회하고, 없으면 데이터베이스를 조회하고 1차 캐시에 저장한다. entity에 값을 채워 넣는데, 모든 값이 변경된다.&lt;/li&gt;
  &lt;li&gt;isNew는 Persistable interface의 메소드이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

		&lt;span class=&quot;nc&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Entity must not be null.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entityInformation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isNew&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;persist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;persist 와 merge의 설명&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;cm&quot;&gt;/**
     * Make an instance managed and persistent.
     * @param entity  entity instance
     * @throws EntityExistsException if the entity already exists.
     * (If the entity already exists, the &amp;lt;code&amp;gt;EntityExistsException&amp;lt;/code&amp;gt; may
     * be thrown when the persist operation is invoked, or the
     * &amp;lt;code&amp;gt;EntityExistsException&amp;lt;/code&amp;gt; or another &amp;lt;code&amp;gt;PersistenceException&amp;lt;/code&amp;gt; may be
     * thrown at flush or commit time.)
     * @throws IllegalArgumentException if the instance is not an
     *         entity
     * @throws TransactionRequiredException if there is no transaction when
     *         invoked on a container-managed entity manager of that is of type
     *         &amp;lt;code&amp;gt;PersistenceContextType.TRANSACTION&amp;lt;/code&amp;gt;
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;persist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * Merge the state of the given entity into the
     * current persistence context.
     * @param entity  entity instance
     * @return the managed instance that the state was merged to
     * @throws IllegalArgumentException if instance is not an
     *         entity or is a removed entity
     * @throws TransactionRequiredException if there is no transaction when
     *         invoked on a container-managed entity manager of that is of type
     *         &amp;lt;code&amp;gt;PersistenceContextType.TRANSACTION&amp;lt;/code&amp;gt;
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Persistable을 구현하지 않으면, 기본적으로 AbstractEntityInformation의 isNew를 실행하게 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isNew&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

		&lt;span class=&quot;no&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getIdType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isPrimitive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;longValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Unsupported primitive id type %s&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;id를 가져와서, wrapper Type이고, id가 null이면 isNew라고 판단한다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;primitive Number 이고, 0 이면 isNew라고 판단한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;그렇기 때문에, isNew를 override하지 않았다면, id가 없을때 isNew라고 판단하고, persist를 호출한다.&lt;/li&gt;
  &lt;li&gt;반대로 Id가 존재할 경우 save했을때, isNew가 false가 되고 ,merge를 호출한다.&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;자주 있는 상황은 아니지만, 준영속 상태의 엔티티의 필드를 변경하고 save를 하게되면, merge가 호출된다.&lt;/li&gt;
  &lt;li&gt;이때 영속성 컨텍스트에 없는 엔티티 이므로, id 기준으로 db에서 조회해서, 준영속상태의 엔티티를 조회한 엔티티에 덮어씌워버린다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;정수형이-아닌-키와-isnew&quot;&gt;정수형이 아닌 키와 isNew&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;복합키 또는 String의 키를 사용하게 되면, 키 생성 전략(auto_increment, using sequence 등등)을 사용할수 없다.&lt;/li&gt;
  &lt;li&gt;그렇기 때문에, 로직에서 복합키를 set 해주게되고, SimpleJpaRepository의 isNew 동작에서 ID가 null이 아니기 때문에, merge를 진행한다.&lt;/li&gt;
  &lt;li&gt;merge 진행순서 : 영속성 컨텍스트에 있는지 확인 -&amp;gt; 영속성 컨텍스트에 없으면 select 후 merge, 트랜잭션 종료전 insert&lt;/li&gt;
  &lt;li&gt;즉, select -&amp;gt; insert가 발생하고. 필요없는 select 가 발생한다…&lt;/li&gt;
  &lt;li&gt;그러므로, isNew를 override 하여, 불필요한 select가 발생하지 않도록 해야한다.&lt;/li&gt;
  &lt;li&gt;결론 : system key(auto_increment) 시스템 키를 사용하자.&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Tue, 18 Oct 2022 20:00:00 +0900</pubDate>
				<link>/2022/10/jpa-persist-merge/</link>
				<guid isPermaLink="true">/2022/10/jpa-persist-merge/</guid>
			</item>
		
			<item>
				<title>프로젝트에서 jpa를 사용하면서 느낀것들</title>
				<description>&lt;h3 id=&quot;jpa-와-jdbc-jpa를-사용하면서-전반적으로-느낀것들&quot;&gt;jpa 와 jdbc, jpa를 사용하면서 전반적으로 느낀것들&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;이전 프로젝트에서는 be에서 직접 jdbc를 사용하여, 프로젝트 개발을 하였다.&lt;/li&gt;
  &lt;li&gt;쿼리를 문자열로 작성하고, parameter mapping 하고, 개발자마다 indent도 다 다르게 작성하는 엄청난 양의 쿼리를 개발만 하고 떠났다.&lt;/li&gt;
  &lt;li&gt;실제로 파라미터 mapping 하는 과정에서의 디버깅도 상당히 오래 걸린다.&lt;/li&gt;
  &lt;li&gt;paging or 동적 쿼리도 쿼리 문자열 중간중간 수 많은 if문으로 되어있다.&lt;/li&gt;
  &lt;li&gt;운영하는 입장에서 봤을때, 지옥 그 자체다.&lt;/li&gt;
  &lt;li&gt;현재 진행하고 있는 프로젝트에서는 jpa를 사용했다.&lt;/li&gt;
  &lt;li&gt;기본적인 쿼리들이 모두 객체로 model화 되어, class 와 repository로 관리되니, be 소스 자체에 쿼리가 많이 줄어든 느낌이다.&lt;/li&gt;
  &lt;li&gt;개발하는 시간도 현저히 줄어들었다. 이게 가장 큰 이점이라고 생각한다.&lt;/li&gt;
  &lt;li&gt;하지만, 잘 모르고 사용하다보니, update 하나 날리는데 두번의 쿼리가 나가고… jdbc를 사용했으면, 하나의 쿼리로 가능한데, 여러번의 쿼리를 날리게되는 과정을 거쳤다…&lt;/li&gt;
  &lt;li&gt;그래서 프로젝트 진행하면서, jpa를 최적화 관련한 사항을 정리 해두려고한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;변경된것만-update&quot;&gt;변경된것만 update?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;jpa는 기본적으로 하나의 필드라도, 변경감지가 되면, model의 모든 필드를 update한다.&lt;/li&gt;
  &lt;li&gt;db에 보내는 데이터 전송량이 많아진다.&lt;/li&gt;
  &lt;li&gt;하지만, 변경감지로 인해 모든 필드를 Update하기때문에 수정쿼리가 항상 같다. 그러므로 db는 한번 파싱된 쿼리를 재사용하는 이점이 있다.&lt;/li&gt;
  &lt;li&gt;수정된 데이터만 동적으로 update 하고 싶다면, model 에 @DynamicUpdate를 붙여주면 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;내부조인-외부조인&quot;&gt;내부조인? 외부조인&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;부끄럽게도, 프로젝트 중반에 알게된 내용이다.&lt;/li&gt;
  &lt;li&gt;연관관계를 설정하고, eager 로딩을 할 경우, nullable = false 로 해주지 않으면, jpa 는 기본적으로 Left 조인을 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@ManyToOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;EAGER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@JoinColumn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(...,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Or&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ManyToOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;EAGER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@JoinColumn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(...)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;이렇게되면, 원하지 않은 join이 되어, null column을 가진 대상도 같이 조회 될 것이다.&lt;/li&gt;
  &lt;li&gt;이번 프로젝트 하면서 느끼는거지만, db 컬럼 정의부터, entity 설정까지.. 정확한 도메인 분석을 바탕으로 설계하는것이 필수다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jpql-페치조인--글로벌-로딩-전략&quot;&gt;JPQL 페치조인 / 글로벌 로딩 전략&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;entity에 적용하는 로딩 전략은 글로벌 로딩 전략이라고 한다.&lt;/li&gt;
  &lt;li&gt;기본적으로 글로벌 로딩 전략으로 lazy 전략을 사용하고, 최적화가 필요한 곳에 페치 조인을 사용하는것이 합리적이다
    &lt;ul&gt;
      &lt;li&gt;이유는, 글로벌 로딩 전략으로 eager를 사용하면, 여러 엔티티가 필요한 곳에서는 효과적일 수 있지만, 단건 조회하는 곳에서는 성능에 악영향을 미친다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jpql-벌크연산-주의점&quot;&gt;JPQL 벌크연산 주의점&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;JPQL은 일단 db에 쿼리를 날리는게 먼저다.&lt;/li&gt;
  &lt;li&gt;즉, JPQL 벌크연산(delete, update, insert)은 영속성 컨텍스트를 무시하고 db에 직접 쿼리한다.&lt;/li&gt;
  &lt;li&gt;그러므로, 벌크연산시 영속성컨텍스트에 존재하는 엔티티의 값은 변경되지 않는다.&lt;/li&gt;
  &lt;li&gt;결론. 벌크 연산을 수행한 후에 refresh를 하여 재조회하거나, 벌크 연산을 트랜잭션 가정 먼저 실행하거나, 벌크연산 후에 영속성 컨텍스트를 초기화(clear and flush) 해야한다.&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Mon, 17 Oct 2022 20:00:00 +0900</pubDate>
				<link>/2022/10/jpa-remind/</link>
				<guid isPermaLink="true">/2022/10/jpa-remind/</guid>
			</item>
		
			<item>
				<title>db 동시성 처리</title>
				<description>&lt;h3 id=&quot;concurrency&quot;&gt;concurrency&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;db에 데이터(특정 데이터)의 접근을 어떻게 처리할것인가?&lt;/li&gt;
  &lt;li&gt;수 많은 요청에 대해서, transaction을 생성 처리 하는 과정에서 어떻게 데이터가 유효한지 확인할 수 있을까?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;문제-상황&quot;&gt;문제 상황&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;account의 balance가 10 이라고 하자&lt;/li&gt;
  &lt;li&gt;account의 명의가 두명(A,B) 라고 하면&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;A가 계좌에 10이 남아있어서 10을 withdraw 요청을 함.&lt;/li&gt;
  &lt;li&gt;B도 동시에(거의 같은시간에) 요청을 함&lt;br /&gt;
3-1. A 요청 처리, validateion(10 &amp;gt; balance) OK&lt;br /&gt;
3-2. B 요청 처리, validation(10 &amp;gt; balance) OK&lt;br /&gt;
4-1. A 요청 update(balance = balance - 10) 커밋&lt;br /&gt;
4-2. B 요청 update(balance = balance - 10) 커밋&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;이렇게 진행되면, balance는 -10이 됨. 말이 안된다…&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;db-isolation-level&quot;&gt;db isolation level&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;참고 : https://zzang9ha.tistory.com/381&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;read uncommitted : 다른 트랜잭션에서 commit 되지 않는 내용도 읽을 수 있음&lt;/li&gt;
  &lt;li&gt;read committed : 다른 트랜잭션에서 commit 된 내용만 읽을 수 있음&lt;/li&gt;
  &lt;li&gt;repeatable read : 다른 트랜잭션에서 commit 된 내용이 있어도, 처음 읽은 데이터가 유지됨&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;serialize : 다른 트랜잭션의 데이터 접근을 막음.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;실제 서비스에서는 serialize는 사용하지 않는다. 한 트랜잭션이 데이터를 점유하고 있게 되면, 다른 트랜잭션이 무한정 기다리게 되는 deadlock 문제가 발생하게된다.&lt;/li&gt;
  &lt;li&gt;read committed/ repeatable read 에서도 문제상황과 같은 현상이 발생하게 될텐데 어떻게 처리할 수 있을까?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;read-committed에서-동시성-문제-해결-방법lock&quot;&gt;Read committed에서 동시성 문제 해결 방법(lock)&lt;/h3&gt;

&lt;h4 id=&quot;1-비관적-lock&quot;&gt;1. 비관적 lock&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;select … for update&lt;/li&gt;
  &lt;li&gt;다른 트랜잭션이 접근하지 못하게 한다. serialize와 같은 방법 문제가 많다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2-낙관적-lock---update-validation&quot;&gt;2. 낙관적 lock - update validation&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;낙관적 Lock은 application 단에서 수행하는 Lock 이다.&lt;/li&gt;
  &lt;li&gt;해당 방법은 비즈니스 요구사항에 따라 다르게 사용된다.&lt;/li&gt;
  &lt;li&gt;보통 update가 가능한지 확인하기 위해 validation을 진행하게 되고, update를 진행한다.&lt;/li&gt;
  &lt;li&gt;문제는 validation은 통과했지만, Update 시 다른 트랜잭션이 update하여, 한 트랜잭션에서 데이터의 동일성을 보장하지 못한다는것이다.&lt;/li&gt;
  &lt;li&gt;이때 update 시에도 validation을 진행하는것이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;update 하는 동시에 유효한 값인지 확인하게 되면 동시성문제를 회피할 수 있다.&lt;/li&gt;
  &lt;li&gt;read-committed 인 경우, update 하고, Tx가 커밋될때까지, 해당 Row는 lock이 걸리게 된다. 다른 tx에서 접근 불가&lt;/li&gt;
  &lt;li&gt;jpa의 가장 큰 장점중 하나는, 쓰기지연이다. write 기능을 트랜잭션 종료전 마지막에 수행한다는것이다. 그러므로 Lock을 최소화해준다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;3-낙관적-lock---version&quot;&gt;3. 낙관적 lock - Version&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;version등의 구분 컬럼을 이용해서 read - update 시, Read 했을때의 Version이 update 시의 version과 같은지 확인하는 절차를 진행한다.&lt;/li&gt;
  &lt;li&gt;jpa에서는 @version 을 통해서 해당 낙관적 lock을 지원한다.&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Tue, 11 Oct 2022 20:00:00 +0900</pubDate>
				<link>/2022/10/concurrency/</link>
				<guid isPermaLink="true">/2022/10/concurrency/</guid>
			</item>
		
			<item>
				<title>spring feign client http 정보</title>
				<description>&lt;h3 id=&quot;feign-client-response&quot;&gt;feign client response&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;프로젝트 진행중, be에서 외부 api request 할일이 생기면서, api request 시, 오류 건에 대하여, 이력을 남기는 작업을 진행하였다.&lt;/li&gt;
  &lt;li&gt;feign client 로 api request를 진행하였는데, 이력을 남기기위한 정보(request url, pathparam, queryparam, requestbody..)가 필요하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;기존-feign-client-response&quot;&gt;기존 feign client response&lt;/h4&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@FeignClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;externalApiCall&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;${external.api.url}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExternalApiFeign&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@PostMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/contract&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;ExternalResponseDTO&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;retrieveContractInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;@RequestBody&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExternalRequestDTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;위 코드처럼 하게되면, feign에서 알아서 http response body를 꺼내어 ExternalResponseDTO로 만들어준다.&lt;/li&gt;
  &lt;li&gt;그런데, 나는 dto 뿐만아니라, 이력을 남기기 위한 정보(request url, pathparam, queryparam, requestbody..)가 필요했다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@PostMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/contract&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;retrieveContractInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;@RequestBody&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExternalRequestDTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Feign의 Response 를 리턴하도록 하고, 내부 로직에서 해당 response에서 request url, pathparam, requestbody 등등을 꺼내어 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;에러&quot;&gt;에러&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;feign에서는 기본적으로 200~300 http statuscode는 정상응답으로 처리하고, 이외의 상태코드는 FeignException을 발생시킨다.&lt;/li&gt;
  &lt;li&gt;하지만 리턴타입을 Response로 해놓으면, 4xx의 응답도 정상응답으로 처리하고, 사용하는 개발자에게 처리하도록 만들어 놓았다.&lt;/li&gt;
  &lt;li&gt;이럴때는, feign에서 제공하는 ErrorDecoder 를 사용하여, 처리 가능하다. (참고 : https://www.baeldung.com/java-feign-client-exception-handling)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;공통화&quot;&gt;공통화&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;이력을 남기는 작업은 비즈니스 로직 곳곳에서 이뤄진다.&lt;/li&gt;
  &lt;li&gt;spring aop를 이용하여, 외부 호출 전, 후로 이력을 남기는 작업을 진행하면, 공통화 하여 처리할 수 있을듯하다.&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Mon, 19 Sep 2022 22:30:00 +0900</pubDate>
				<link>/2022/09/feign-client-response/</link>
				<guid isPermaLink="true">/2022/09/feign-client-response/</guid>
			</item>
		
			<item>
				<title>spring controller validation</title>
				<description>&lt;h3 id=&quot;controller-parameter-validation&quot;&gt;controller parameter validation&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;기본적으로 springmvc는 JSR 303 implementation, hibernate-validator 같은 library가 추가되어야한다.
    &lt;ul&gt;
      &lt;li&gt;그리고 @Configure로 bean 등록하여야한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;spiring boot는 자동으로 등록되어있다.&lt;/li&gt;
  &lt;li&gt;기본적으로 path or request param error 는 500 http error 로 response 된다.
    &lt;ul&gt;
      &lt;li&gt;@ControllerAdvice로 custom error 처리를 할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;validation&quot;&gt;validation&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;javax.validation.constraints package에 있는 모든 validation 을 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;//request /testController?age=100&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@PostMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/testController&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ResponseData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResponseUtility&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createPostAsyncSuccessResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//결과 : test.age: 99 이하여야 합니다&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@PostMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/testController/{name}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ResponseData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateMemberWallets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@NotBlank&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResponseUtility&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createPostAsyncSuccessResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//결과 : test.name: 크기가 10에서 2147483647 사이여야 합니다&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;@RequestBody의 경우, 정의된 dto의 각 필드에 validation annotation을 정의하고, @RequestBody @Valid DTO dto 로 하면 validation 처리할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;참고 : https://www.baeldung.com/spring-validate-requestparam-pathvariable&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Sat, 17 Sep 2022 12:30:00 +0900</pubDate>
				<link>/2022/09/spring-controller-validation/</link>
				<guid isPermaLink="true">/2022/09/spring-controller-validation/</guid>
			</item>
		
			<item>
				<title>profile에 따라 bean 주입</title>
				<description>&lt;h3 id=&quot;bean-주입-방식&quot;&gt;bean 주입 방식&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;bean 주입 방식은 필드 주입(@autowire), final 을 이용한 생성자 주입, bean 주입이 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;bean으로-등록하기&quot;&gt;bean으로 등록하기&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;@Service, @Repository, @RestController 들은 모두 @Component 로 되어있어, 런타임시 자동으로 spring bean으로 등록된다.
    &lt;ul&gt;
      &lt;li&gt;내가 만든 class를 bean으로 등록하고 싶다면, @Component를 붙여주면 spring component 스캔대상이 되어 bean으로 등록된다.&lt;/li&gt;
      &lt;li&gt;즉, spring 에게 알아서 bean으로 등록해서 인스턴스 생성/관리 해달라고 하는것&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;@Configure class에 @Bean 메소드(setter, builder)를 생성하여, bean 등록할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;주로 외부 라이브러리(redis관련, swagger) 를 등록할때 사용된다.
        &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RedisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;redisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SystemException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;RedisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redisTemplate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RedisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setConnectionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;redisConnectionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setKeySerializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringRedisSerializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setValueSerializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringRedisSerializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;개발하면서 생성한 클래스도 @Bean을 사용하여 등록가능하다.
        &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Primary&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FeignUtility&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;feignUtility&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FeignUtilityMock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;profile에-따라-bean-주입을-선택적으로&quot;&gt;profile에 따라 bean 주입을 선택적으로&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;feign client를 사용하여, 외부 api call을 개발한 경우, 모듈 테스트를 위하여, 실제 request를 하지 않도록 하고, mocking 해야하는 경우가 있다.&lt;/li&gt;
  &lt;li&gt;이때 feign interface를 구현한 mocking 클래스를 @Bean으로 주입하여, spring app이 기동되도록 profile과 간단한 설정으로 가능하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// build.gradle 설정 : automation profile&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bootRunAutomation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;application&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gradle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;taskGraph&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;whenReady&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bootRunAutomation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;bootRun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;configure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;systemProperty&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;spring.profiles.active&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;automation&quot;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;finalizedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bootRun&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// application-automation.yml&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;spring:&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;config:&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;yml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Profile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;automation&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;feature&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MockConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Primary&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FeignUtility&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;feignUtility&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FeignUtilityMock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//실제 Feign client interface&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@FeignClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;feignUtility&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;${feign.url}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FeignUtility&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@PostMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/member&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;MemberDTO&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getMemberInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;@RequestBody&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RequestDTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requestDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
				<pubDate>Sat, 17 Sep 2022 11:30:00 +0900</pubDate>
				<link>/2022/09/bean-inject/</link>
				<guid isPermaLink="true">/2022/09/bean-inject/</guid>
			</item>
		
	</channel>
</rss>
