I"}	<h1 id="빈의-스코프">빈의 스코프</h1>

<h2 id="싱글톤">싱글톤</h2>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Single</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="nc">Proto</span> <span class="n">proto</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">Proto</span> <span class="nf">getProto</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">proto</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Proto</span> <span class="o">{</span>
<span class="o">}</span></code></pre></figure>

<ul>
  <li>Single의 proto 와 Proto는 같은 인스턴스 이다.</li>
  <li>기본적으로 Singleton.</li>
</ul>

<h2 id="새로운-빈을-원한다면">새로운 빈을 원한다면?</h2>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Component</span> <span class="nd">@Scope</span><span class="o">(</span><span class="s">"prototype"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Proto</span> <span class="o">{</span>
<span class="o">}</span></code></pre></figure>

<ul>
  <li>Proto 타입의 빈을 가져올때 마다 새로운 인스턴스를 생성한다.</li>
</ul>

<h2 id="프로토-타입-빈이-싱글톤-빈을-참조">프로토 타입 빈이 싱글톤 빈을 참조</h2>
<ul>
  <li>문제 없음</li>
</ul>

<h2 id="싱글톤-빈이-프로토타입-빈을-참조">싱글톤 빈이 프로토타입 빈을 참조</h2>
<ul>
  <li>싱글톤 빈을 가져올때 마다, 프로토 타입 빈이 변경되어야 되지 않을까? -&gt; 변경되지 않음.</li>
  <li>변경 되게 하려먼
    <ul>
      <li>scoped-proxy
        <ul>
          <li>@Scope(value = “prototype”, proxyMode = ScopedProxyMode.TARGET_CLASS)</li>
          <li>프록시로 proto를 감싸서, 변경될 수 있도록 한다.</li>
          <li>실제로 감싸고 있는 프록시 빈을 주입 받는것</li>
        </ul>
      </li>
      <li>Object-Provider</li>
    </ul>
  </li>
</ul>

:ET