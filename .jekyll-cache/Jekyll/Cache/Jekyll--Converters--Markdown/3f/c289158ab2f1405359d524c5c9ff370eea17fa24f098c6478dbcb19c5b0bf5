I"<h3 id="프로젝트에서-deadlock-경험기">프로젝트에서 deadlock 경험기.</h3>

<ul>
  <li>다른 도메인에서 deadlock이 발생하여, 관찰(?)한 경험담을 작성한다.</li>
  <li>오픈하고, 이벤트가 있는날, deadlock이 발생하였다.</li>
  <li>Deadlock found when trying to get lock; try restarting transaction</li>
  <li>db는 mysql(read-commited), application 서버는 spring,jpa를 사용하고 있었다.</li>
</ul>

<h3 id="db말고-애플리케이션에서는">DB말고, 애플리케이션에서는?</h3>
<ul>
  <li>java의 synchronized를 이용하여, lock을 잡아, 멀티스레드 환경에서 deadlock 상황을 재현할 수 있다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 1번 스레드</span>
            <span class="kd">synchronized</span> <span class="o">(</span><span class="n">object1</span><span class="o">){</span>
                <span class="k">try</span> <span class="o">{</span>
                    <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
                <span class="o">}</span>
                <span class="kd">synchronized</span> <span class="o">(</span><span class="n">object2</span><span class="o">){</span>
                <span class="o">}</span>
            <span class="o">}</span>
<span class="c1">// 2번 쓰레드</span>
            <span class="kd">synchronized</span> <span class="o">(</span><span class="n">object2</span><span class="o">){</span>
                <span class="k">try</span> <span class="o">{</span>
                    <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
                <span class="o">}</span>
                <span class="kd">synchronized</span> <span class="o">(</span><span class="n">object1</span><span class="o">){</span>
                <span class="o">}</span>
            <span class="o">}</span>

</code></pre></div></div>
<ul>
  <li>두 스레드를 실행시키면, object1과 object2를 lock을 획득하려고 하면서, deadlock상황이 발생한다.</li>
  <li>사실, 애플리케이션 + db 상황에서도 트랜잭션과 db lock의 개념이 추가되는거지 크게는 이 예시와 다를게 없다.</li>
</ul>

<h3 id="db에서-lock">db에서 lock</h3>

<h4 id="테이블-구조">테이블 구조</h4>

<ul>
  <li>Parent와 자식 테이블 Child가 존재한다.</li>
  <li>Parent 하나에 N개의 Child가 존재하는데, 실제 1개의 Parent에 1000개의 Child가 존재한다.</li>
</ul>

<h4 id="로직순서">로직순서</h4>

<ol>
  <li>A 트랜잭션 begin</li>
  <li>A 트랜잭션, native query로 Parent 테이블 update</li>
  <li>B 트랜잭션 begin</li>
  <li>B 트랜잭션, native query로 Child update, Parent 테이블 update</li>
  <li>B 트랜잭션, Parent 테이블 update하고 싶지만 A 트랜잭션이 lock 잡고 있어서, wait</li>
  <li>A 트랜잭션, Child update.</li>
  <li>A 트랜잭션, Child update 하려고 하지만, B 트랜잭션이 lock 잡고 잇어서, wait</li>
</ol>

<ul>
  <li>synchronized로 재현한 구조와 같다.</li>
</ul>

<h4 id="deadlock-회피-방법-1">deadlock 회피 방법 1</h4>
<ul>
  <li>해당 구조에서 deadlock을 만들고 싶지 않다면 가장 쉬운 방법으로, A 트랜잭션에서 시작시점에 Parent 를 select for update 하는것이다.</li>
  <li>select for update는 배타 락. 다른 트랜잭션에서 쓰기는 물론 읽기도 불가능하다.</li>
  <li>select for update 하면, 다른 트랜잭션에서 read도 할 수 없으므로, 보통 서비스 로직을 select - update 로 구성하는 경우, deadlock을 회피할 수 있다.</li>
  <li>하지만 동시성이 많이 떨어지게 된다.</li>
</ul>

<h4 id="deadlock-회피-방법-2">deadlock 회피 방법 2</h4>
<ul>
  <li>Parent 테이블 update를 가장 뒤로 미룬다.</li>
  <li>트랜잭션 로직의 순서가 다음과 같다고 가정하자.(보통 별 생각없이 진행하면 이렇게 된다.)</li>
</ul>

<ol>
  <li>Parent select 및 validation</li>
  <li>Parent update</li>
  <li>Child select 및 validation</li>
  <li>Child update (이때 Child 테이블의 수많은 row를 update하고 validation 한다면?)</li>
</ol>

<ul>
  <li>테이블 구조상, Parent 테이블 1 row 당, Child 테이블 은 N row로 구성된다.</li>
  <li>Child 테이블의 validation + update 작업은 Parent validation + update 작업보다 클것이다.</li>
  <li>이 경우, Child 테이블을 먼저 update하도록 로직의 순서를 바꾸는게, lock을 최소화 할수 있을 것이다. (만약, jpa의 변경감지를 이용한다면, 크게 신경쓰지 않아도 될듯?)</li>
  <li>그리고 보통 Child 테이블 보다, Parent 테이블이 여러 서비스 로직+ 트랜잭션에서 접근하기 때문에, Parent 테이블의 lock을 최소화 하는것이 중요하다.</li>
</ul>

<h4 id="deadlock-회피-방법-3">deadlock 회피 방법 3</h4>
<ul>
  <li>트랜잭션을 포함하고 있는, 서비스 로직 중간에 오래 걸리는 작업(외부 api 호출 등등)이 있지 않은지 확인하자.</li>
  <li>이런 작업이 존재한다면, 적절히 트랜잭션을 분리하는게 옳은 방법이다.</li>
</ul>

:ET