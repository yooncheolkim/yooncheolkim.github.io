I"/<h1 id="spring-전통적-bean-설정-방법---xml">spring 전통적 bean 설정 방법 - xml</h1>

<h2 id="resources---applicationxml-만들어서-사용한다">resources - application.xml 만들어서 사용한다.</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">"http://www.springframework.org/schema/beans"</span>
       <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
       <span class="na">xsi:schemaLocation=</span><span class="s">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span><span class="nt">&gt;</span>

<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"bookService"</span> <span class="na">class=</span><span class="s">"io.github.yooncheolkim.demospringioc.BookService"</span>
      <span class="na">scope=</span><span class="s">"singleton"</span>
      <span class="na">autowire=</span><span class="s">"default"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"bookRepository"</span> <span class="na">ref=</span><span class="s">"bookRepository"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>

<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"bookRepository"</span>
      <span class="na">class=</span><span class="s">"io.github.yooncheolkim.demospringioc.BookRepository"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/beans&gt;</span>
</code></pre></div></div>

<blockquote>
  <p>java</p>
</blockquote>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">io.github.yooncheolkim.demospringioc</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.boot.SpringApplication</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.boot.autoconfigure.SpringBootApplication</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.support.ClassPathXmlApplicationContext</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.lang.reflect.Array</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="c1">//@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DemospringiocApplication</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="nc">ApplicationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">"application.xml"</span><span class="o">);</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">beanDefinitionNames</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBeanDefinitionNames</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">beanDefinitionNames</span><span class="o">));</span>
        <span class="nc">BookService</span> <span class="n">bookService</span> <span class="o">=</span> <span class="o">(</span><span class="nc">BookService</span><span class="o">)</span> <span class="n">context</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"bookService"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">bookService</span><span class="o">.</span><span class="na">bookRepository</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span></code></pre></figure>

<h3 id="결과">결과</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[bookService, bookRepository]
true
</code></pre></div></div>

<h2 id="xml에-bean-하나하나-등록하기-싫으니">xml에 bean 하나하나 등록하기 싫으니,,</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">"http://www.springframework.org/schema/beans"</span>
       <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
       <span class="na">xmlns:context=</span><span class="s">"http://www.springframework.org/schema/context"</span>
       <span class="na">xsi:schemaLocation=</span><span class="s">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"</span><span class="nt">&gt;</span>

    <span class="nt">&lt;context:component-scan</span> <span class="na">base-package=</span><span class="s">"io.github.yooncheolkim.demospringioc"</span> <span class="nt">/&gt;</span>

<span class="nt">&lt;/beans&gt;</span>
</code></pre></div></div>
<ul>
  <li>component-scan 이라는 태그 사용하면, @Component 로 된 애들 다 bean으로 등록해준다.</li>
  <li>@Service, @Repository 은 @Component 확장 된 애들</li>
  <li>Autowired, Inject로 주입 받을 수 있음</li>
  <li>spring 2.5 부터 나왔음…</li>
</ul>

<h1 id="java-class로-빈-등록하기">java class로 빈 등록하기</h1>

<h2 id="configuration-bean">@Configuration, @Bean</h2>
<blockquote>
  <p>java</p>
</blockquote>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ApplicationConfig</span> <span class="o">{</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">BookRepository</span> <span class="nf">bookRepository</span><span class="o">(){</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">BookRepository</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">BookService</span> <span class="nf">bookService</span><span class="o">(){</span>
        <span class="nc">BookService</span> <span class="n">bookService</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BookService</span><span class="o">();</span>
        <span class="n">bookService</span><span class="o">.</span><span class="na">setBookRepository</span><span class="o">(</span><span class="n">bookRepository</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">bookService</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>


<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookRepository</span> <span class="o">{</span>

<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookService</span> <span class="o">{</span>

    <span class="nc">BookRepository</span> <span class="n">bookRepository</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setBookRepository</span><span class="o">(</span><span class="nc">BookRepository</span> <span class="n">bookRepository</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">bookRepository</span> <span class="o">=</span> <span class="n">bookRepository</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DemospringiocApplication</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="nc">ApplicationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">ApplicationConfig</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">beanDefinitionNames</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBeanDefinitionNames</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">beanDefinitionNames</span><span class="o">));</span>
        <span class="nc">BookService</span> <span class="n">bookService</span> <span class="o">=</span> <span class="o">(</span><span class="nc">BookService</span><span class="o">)</span> <span class="n">context</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"bookService"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">bookService</span><span class="o">.</span><span class="na">bookRepository</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span></code></pre></figure>

<ul>
  <li>@Configuration 을 만들어서, 사용하는 방법</li>
  <li>AnnotationConfigApplicationContext</li>
</ul>

<h2 id="componentscan">@ComponentScan()</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Configuration
@ComponentScan(basePackageClasses = DemospringiocApplication.class)
public class ApplicationConfig {

}

@Repository
public class BookRepository {

}

@Service
public class BookService {

    BookRepository bookRepository;

    public void setBookRepository(BookRepository bookRepository) {
        this.bookRepository = bookRepository;
    }
}
</code></pre></div></div>

<h2 id="spring-boot-에서-컴포넌트-스캔">spring boot 에서 컴포넌트 스캔</h2>

<ul>
  <li>@SpringBootApplication 을 사용하면,,</li>
  <li>
    <p>@SpringBootApplication 은 @ComponentScan, @Configuration을 확장한 어노테이션 이다.</p>
  </li>
  <li>그래서,  @SpringBootApplication 자체가 컴포넌트 스캔 설정 파일 이다. -&gt; 이 어노테이션은 spring boot.</li>
</ul>
:ET