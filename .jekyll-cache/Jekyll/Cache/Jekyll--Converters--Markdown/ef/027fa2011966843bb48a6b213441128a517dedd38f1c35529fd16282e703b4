I"j<h2 id="리플렉션">리플렉션</h2>

<h3 id="리플렉션의-시작은-classt">리플렉션의 시작은 Class&lt;T&gt;</h3>
<ul>
  <li>모든 클래스가 로딩되고, Class&lt;T&gt;의 인스턴스가 생긴다.</li>
  <li>타입.class 로 접근가능하다.</li>
  <li>모든 인스턴스는 .getClass()를 가지고 있다. 이걸로도 접근가능하다.</li>
  <li>Class.forName(“type”) 으로도 가져올수 있다. 없으면 Exception</li>
  <li>변수, 메소드, 상위클래스, 어노테이션, 인터페이스 가져올수 있다.</li>
</ul>

<h3 id="어노테이션과-리플렉션">어노테이션과 리플렉션</h3>
<ul>
  <li>@Retention : 어노테이션 언제까지 유지할까요, 소스? 클래스? 런타임?</li>
</ul>

<figure class="highlight filename"><pre><code class="language-java" data-lang="java"><span class="nd">@Retention</span><span class="o">(</span><span class="nc">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="nc">BookService</span><span class="o">{</span>
<span class="o">}</span></code></pre></figure>

<ul>
  <li>@Inherit : 해당 애노테이션을 하위 클래스에 전달할것인가?</li>
  <li>
    <p>@Target : 어디에 사용할 수 있는가?<br />
&lt;/br&gt;&lt;/br&gt;</p>
  </li>
  <li>getAnnotations() : 상속받은 애노테이션까지 조회</li>
  <li>getDeclaredAnnotations() : 자기 자신에만 붙어있는 애노테이션 조회</li>
</ul>

<h3 id="reflection-으로-di-구현하기">reflection 으로 DI 구현하기</h3>

<blockquote class="filename">
  <p>Java</p>
</blockquote>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ContainerService</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="no">T</span> <span class="nf">getObject</span><span class="o">(</span><span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">classType</span><span class="o">){</span>
        <span class="no">T</span> <span class="n">instance</span> <span class="o">=</span> <span class="n">createInstance</span><span class="o">(</span><span class="n">classType</span><span class="o">);</span>
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">classType</span><span class="o">.</span><span class="na">getDeclaredFields</span><span class="o">()).</span><span class="na">forEach</span><span class="o">(</span><span class="n">f</span> <span class="o">-&gt;{</span>

            <span class="k">if</span><span class="o">(</span><span class="n">f</span><span class="o">.</span><span class="na">getAnnotation</span><span class="o">(</span><span class="nc">Inject</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
                <span class="nc">Object</span> <span class="n">fieldInstance</span><span class="o">=</span> <span class="n">createInstance</span><span class="o">(</span><span class="n">f</span><span class="o">.</span><span class="na">getType</span><span class="o">());</span>
                <span class="n">f</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
                <span class="k">try</span> <span class="o">{</span>
                    <span class="n">f</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">instance</span><span class="o">,</span><span class="n">fieldInstance</span><span class="o">);</span>
                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IllegalAccessException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">});</span>
        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="no">T</span> <span class="nf">createInstance</span><span class="o">(</span><span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">classType</span><span class="o">){</span>
        <span class="k">try</span><span class="o">{</span>
            <span class="k">return</span> <span class="n">classType</span><span class="o">.</span><span class="na">getConstructor</span><span class="o">(</span><span class="kc">null</span><span class="o">).</span><span class="na">newInstance</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InstantiationException</span> <span class="o">|</span> <span class="nc">IllegalAccessException</span> <span class="o">|</span> <span class="nc">NoSuchMethodException</span> <span class="o">|</span> <span class="nc">InvocationTargetException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<figure class="highlight filename"><pre><code class="language-java" data-lang="java"><span class="nd">@Retention</span><span class="o">(</span><span class="nc">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="nc">Inject</span> <span class="o">{</span>
<span class="o">}</span></code></pre></figure>
:ET