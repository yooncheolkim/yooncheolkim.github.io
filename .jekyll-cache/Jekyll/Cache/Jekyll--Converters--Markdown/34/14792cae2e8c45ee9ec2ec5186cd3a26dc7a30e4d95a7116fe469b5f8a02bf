I"C)<h1 id="applicationeventpublisher">ApplicationEventPublisher</h1>
<ul>
  <li>옵저버패턴 구현, 이벤트 프로그래밍 인터페이스 제공</li>
</ul>

<h2 id="42-이전-이벤트-사용법">4.2 이전 이벤트 사용법</h2>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyEvent</span> <span class="kd">extends</span> <span class="nc">ApplicationEvent</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kt">int</span> <span class="n">data</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">MyEvent</span><span class="o">(</span><span class="nc">Object</span> <span class="n">source</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">source</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nf">MyEvent</span><span class="o">(</span><span class="nc">Object</span> <span class="n">source</span><span class="o">,</span> <span class="kt">int</span> <span class="n">data</span><span class="o">){</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">source</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getData</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">data</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppRunner</span> <span class="kd">implements</span> <span class="nc">ApplicationRunner</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="nc">ApplicationEventPublisher</span> <span class="n">applicationContext</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="nc">ApplicationArguments</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">applicationContext</span><span class="o">.</span><span class="na">publishEvent</span><span class="o">(</span><span class="k">new</span> <span class="nc">MyEvent</span><span class="o">(</span><span class="k">this</span><span class="o">,</span><span class="mi">100</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyEventhandler</span> <span class="kd">implements</span> <span class="nc">ApplicationListener</span><span class="o">&lt;</span><span class="nc">MyEvent</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onApplicationEvent</span><span class="o">(</span><span class="nc">MyEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"이벤트 받았따."</span> <span class="o">+</span> <span class="n">event</span><span class="o">.</span><span class="na">getData</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<ul>
  <li>ApplicationEvent를 상속받은 이벤트 객체를 생성하고,</li>
  <li>applicationContext.publishEvent를 사용하여, 이벤트를 핸들러에 전달</li>
  <li>ApplicationListener<MyEvent> 를 구현한 이벤트 핸들러에서 해당 이벤트를 사용하여, 코딩...</MyEvent></li>
</ul>

<h2 id="applicationevent-필요없이-이벤트-발생시키기">ApplicationEvent 필요없이 이벤트 발생시키기</h2>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyEvent</span><span class="o">{</span>

    <span class="kd">private</span> <span class="kt">int</span> <span class="n">data</span><span class="o">;</span>

    <span class="nc">Object</span> <span class="n">object</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">MyEvent</span><span class="o">(</span><span class="nc">Object</span> <span class="n">source</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">object</span> <span class="o">=</span> <span class="n">source</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nf">MyEvent</span><span class="o">(</span><span class="nc">Object</span> <span class="n">source</span><span class="o">,</span> <span class="kt">int</span> <span class="n">data</span><span class="o">){</span>
        <span class="n">object</span> <span class="o">=</span> <span class="n">source</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getData</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">data</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppRunner</span> <span class="kd">implements</span> <span class="nc">ApplicationRunner</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="nc">ApplicationEventPublisher</span> <span class="n">applicationContext</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="nc">ApplicationArguments</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">applicationContext</span><span class="o">.</span><span class="na">publishEvent</span><span class="o">(</span><span class="k">new</span> <span class="nc">MyEvent</span><span class="o">(</span><span class="k">this</span><span class="o">,</span><span class="mi">100</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyEventhandler</span>  <span class="o">{</span>

    <span class="nd">@EventListener</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="nc">MyEvent</span> <span class="n">event</span><span class="o">){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"이벤트 발생"</span> <span class="o">+</span> <span class="n">event</span><span class="o">.</span><span class="na">getData</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<ul>
  <li>event 와 핸들러가 더욱 pojo 스러워 졌다.</li>
  <li>스프링 비 침투성,</li>
  <li>handler 메소드에 @EventListener 달아줘야, 스프링이 이 메소드가 핸들러인지 알수있음.</li>
</ul>

<h2 id="비동기로-order-async">비동기로, Order, Async</h2>
<ul>
  <li>같은 event를 처리하는 여러 핸들러가 존재하면 순서를 줄수 있음</li>
</ul>

<h3 id="order">Order</h3>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AnotherHandler</span> <span class="o">{</span>

    <span class="nd">@EventListener</span>
    <span class="nd">@Order</span><span class="o">(</span><span class="nc">Ordered</span><span class="o">.</span><span class="na">HIGHEST_PRECEDENCE</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handler</span><span class="o">(</span><span class="nc">MyEvent</span> <span class="n">event</span><span class="o">){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"another"</span> <span class="o">+</span> <span class="n">event</span><span class="o">.</span><span class="na">getData</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<ul>
  <li>Async도 있음..(나중에 정리하자..)</li>
</ul>

<h2 id="스프링이-제공하는-기본-이벤트">스프링이 제공하는 기본 이벤트</h2>
<ul>
  <li>ContextRefreshedEvent : ApplicationContext를 초기화 했더니 리프레시 했을때 발생.</li>
  <li>ContextStartedEvent : ApplicationContext를 Start() 하여 라이프사이클 빈들이 시작 신호를 받은 시점에 발생</li>
  <li>ContextStoppedEvent : ApplicationContext를 Stop() 하여 라이프사이클 빈들이 정지 신호를 받은 시점에 발생</li>
  <li>ContextClosedEvent : ApplicationContext를 close() 하여 싱글톤 빈 소멸되는 시점에 발생.</li>
  <li>RequestHandledEvent : HTTP 요청을 처리했을 때 발생.</li>
</ul>
:ET