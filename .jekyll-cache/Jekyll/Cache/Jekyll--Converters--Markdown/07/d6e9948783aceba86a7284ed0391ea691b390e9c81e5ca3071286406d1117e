I"Y!<h3 id="cross-origin-resouce-sharing">Cross Origin Resouce Sharing</h3>

<ul>
  <li>naver 접속해서 다른 도메인으로 http 요청 보내면 에러 발생한다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="p">{</span>
  <span class="k">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="dl">"</span><span class="s2">http://example.com</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">alert</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span> <span class="c1">// TypeError: Failed to fetch</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>도메인, 프로토콜, 포트가 다른 곳으로 요청을 보내는것을 cors라 한다.</li>
  <li>origin : http + domain + port</li>
</ul>

<h3 id="왜-필요한가">왜 필요한가.</h3>

<ul>
  <li>예를 들어, 사용자가 해커가 만든 hacker.com에 접속하여, gmail.com에 요청을 보내 나의 메일 정보를 다 가져간다면?</li>
</ul>

<h4 id="과거의-우회-방법들">과거의 우회 방법들</h4>

<ol>
  <li>form 태그는 action을 통해 어디든 데이터를 보낼수 있다는 점을 이용</li>
  <li>script 태그의 src 를 사용</li>
</ol>

<ul>
  <li>
    <p>script 태그의 src는 도메인을 상관하지 않는다.</p>
  </li>
  <li>
    <p>url의 쿼리 파라미터로 callback 메소드를 넘겨주고, 서버는 그 메소드를 실행시킨다.</p>
  </li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">script</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">"</span><span class="s2">script</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">script</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s2">`http://another.com/weather.json?callback=gotWeather`</span><span class="p">;</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">script</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>처음에는 크로스 오리진 요청이 불가능했지만, 풀기로함. cros가 정의됨.</li>
  <li>서버에서 명시적으로 허용했을때만 가능.</li>
</ul>

<h3 id="외부요청-가능하게-하는법">외부요청 가능하게 하는법?</h3>

<ul>
  <li>서버에서 응답 헤더에 Access-Control-Allow-Origin 이 있으면 요청 가능하다.</li>
</ul>

<h3 id="cors-작동-방식">CORS 작동 방식</h3>

<ol>
  <li>브라우저에서 교차 요청일 경우 Preflight를 먼저 날려보고 (OPTIONS 메소드 사용)</li>
  <li>응답에 Access-Control-Allow-Origin일 경우, 브라우저에서 실제 요청을 보낸다.</li>
</ol>

<h3 id="그렇다면-서버측-처리는">그렇다면 서버측 처리는?</h3>

<h4 id="spring">spring</h4>

<ul>
  <li>springboot에서는 다음과 같이 처리 가능, 전체 적용</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CorsConfig</span> <span class="kd">implements</span> <span class="nc">WebMvcConfigurer</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addCorsMappings</span><span class="o">(</span><span class="nc">CorsRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">registry</span><span class="o">.</span><span class="na">addMapping</span><span class="o">(</span><span class="s">"/**"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">allowedOriginPatterns</span><span class="o">(</span><span class="s">"*"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">allowedMethods</span><span class="o">(</span><span class="s">"GET"</span><span class="o">,</span> <span class="s">"POST"</span><span class="o">,</span> <span class="s">"PUT"</span><span class="o">,</span> <span class="s">"DELETE"</span><span class="o">,</span> <span class="s">"OPTIONS"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">allowedHeaders</span><span class="o">(</span>
                        <span class="s">"Content-Type"</span><span class="o">,</span>
                        <span class="s">"X-Requested-With"</span><span class="o">,</span>
                        <span class="s">"x-session-id"</span><span class="o">,</span>
                        <span class="s">"x-session-info"</span><span class="o">,</span>
                        <span class="s">"x-correlation-id"</span><span class="o">,</span>
                        <span class="s">"x-language-code"</span><span class="o">,</span>
                        <span class="s">"Accept"</span><span class="o">,</span>
                        <span class="s">"Origin"</span><span class="o">,</span>
                        <span class="s">"Authorization"</span><span class="o">,</span>
                        <span class="s">"Date"</span><span class="o">,</span>
                        <span class="s">"Access-Control-Request-Method"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">exposedHeaders</span><span class="o">(</span>
                        <span class="s">"Access-Control-Allow-Headers"</span><span class="o">,</span>
                        <span class="s">"Access-Control-Allow-Origin"</span><span class="o">,</span>
                        <span class="s">"Access-Control-Allow-Credentials"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">allowCredentials</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
                <span class="o">.</span><span class="na">maxAge</span><span class="o">(</span><span class="mi">3000L</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="모든-외부-도메인-요청을-허용할-경우">모든 외부 도메인 요청을 허용할 경우</h4>

<ul>
  <li>Access-Control-Allow-Origin 를 * 로</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Access-Control-Allow-Origin : *
Access-Control-Allow-Methods: GET,POST,PUT,DELETE,OPTIONS
Access-Control-Max-Age : 3600
Access-Control-Allow-Headers: Origin,Accept, X-Requested-With, Content-Type, Access-Control-Request-Method,
Access-Control-Request-Headers,Authorization
</code></pre></div></div>

<h4 id="외부-도메인-요청을-선별적으로-허용할-경우">외부 도메인 요청을 선별적으로 허용할 경우</h4>

<h5 id="클라이언트-요청-헤더">클라이언트 요청 헤더</h5>

<ul>
  <li>Origin : 요청을 보내는 페이지의 출처(도메인)</li>
  <li>Access-Control-Request-Method : 실제 요청 메서드</li>
  <li>Access-Control-Request-Headers: 실제 요청에 포함되어 있는 헤더 이름</li>
</ul>

<h5 id="서버의-응답-헤더">서버의 응답 헤더</h5>

<ul>
  <li>Access-Control-Allow-Origin : 요청을 허용하는 출처, (*일 경우 모든 곳에 공개)</li>
  <li>Access-Control-Allow-Credentials : 클라이언트 요청이 쿠키를 통해 자격증명 해야 하는 경우에 true.(true를 받은 클라이언트는 실제 요청시 서버에서 정의된 규격의 인증값이 담긴 쿠키를 같이 보내야함.)</li>
  <li>Access-Control-Expose-Headers : 클라이언트 요청에 포함되어도 되는 사용자 정의 헤더</li>
  <li>Access-Control-Max-Age : preflight 저장 기간. 클라이언트에서 다시 요청하지 않게 하려고.</li>
  <li>Access-Control-Allow-Methods : 요청을 허용하는 메서드</li>
  <li>Access-Control-Allow-Headers : 요청을 허용하는 헤더</li>
</ul>
:ET