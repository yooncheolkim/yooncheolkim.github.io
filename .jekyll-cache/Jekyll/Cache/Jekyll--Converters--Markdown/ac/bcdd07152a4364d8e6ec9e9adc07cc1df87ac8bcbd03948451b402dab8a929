I"%<h3 id="bean-주입-방식">bean 주입 방식</h3>

<ul>
  <li>bean 주입 방식은 필드 주입(@autowire), final 을 이용한 생성자 주입, bean 주입이 있다.</li>
</ul>

<h4 id="bean으로-등록하기">bean으로 등록하기</h4>

<ul>
  <li>@Service, @Repository, @RestController 들은 모두 @Component 로 되어있어, 런타임시 자동으로 spring bean으로 등록된다.
    <ul>
      <li>내가 만든 class를 bean으로 등록하고 싶다면, @Component를 붙여주면 spring component 스캔대상이 되어 bean으로 등록된다.</li>
      <li>즉, spring 에게 알아서 bean으로 등록해서 인스턴스 생성/관리 해달라고 하는것</li>
    </ul>
  </li>
  <li>@Configure class에 @Bean 메소드(setter, builder)를 생성하여, bean 등록할 수 있다.
    <ul>
      <li>주로 외부 라이브러리(redis관련, swagger) 를 등록할때 사용된다.
        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="kd">public</span> <span class="nc">RedisTemplate</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">redisTemplate</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">SystemException</span> <span class="o">{</span>
    <span class="nc">RedisTemplate</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">redisTemplate</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RedisTemplate</span><span class="o">&lt;&gt;();</span>
    <span class="n">redisTemplate</span><span class="o">.</span><span class="na">setConnectionFactory</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">redisConnectionFactory</span><span class="o">());</span>
    <span class="n">redisTemplate</span><span class="o">.</span><span class="na">setKeySerializer</span><span class="o">(</span><span class="k">new</span> <span class="nc">StringRedisSerializer</span><span class="o">());</span>
    <span class="n">redisTemplate</span><span class="o">.</span><span class="na">setValueSerializer</span><span class="o">(</span><span class="k">new</span> <span class="nc">StringRedisSerializer</span><span class="o">());</span>
    <span class="k">return</span> <span class="n">redisTemplate</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div>        </div>
      </li>
      <li>개발하면서 생성한 클래스도 @Bean을 사용하여 등록가능하다.
        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="nd">@Primary</span>
<span class="kd">public</span> <span class="nc">FeignUtility</span> <span class="nf">feignUtility</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">FeignUtilityMock</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h4 id="profile에-따라-bean-주입을-선택적으로">profile에 따라 bean 주입을 선택적으로</h4>

<ul>
  <li>feign client를 사용하여, 외부 api call을 개발한 경우, 모듈 테스트를 위하여, 실제 request를 하지 않도록 하고, mocking 해야하는 경우가 있다.</li>
  <li>이때 feign interface를 구현한 mocking 클래스를 @Bean으로 주입하여, spring app이 기동되도록 profile과 간단한 설정으로 가능하다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// build.gradle 설정 : automation profile</span>
<span class="n">task</span> <span class="n">bootRunAutomation</span> <span class="o">{</span>
    <span class="n">group</span> <span class="o">=</span> <span class="s">"application"</span>
    <span class="n">gradle</span><span class="o">.</span><span class="na">taskGraph</span><span class="o">.</span><span class="na">whenReady</span> <span class="o">{</span> <span class="n">graph</span> <span class="o">-&gt;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">graph</span><span class="o">.</span><span class="na">hasTask</span><span class="o">(</span><span class="n">bootRunAutomation</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">bootRun</span> <span class="o">{</span>
                <span class="n">configure</span> <span class="o">{</span>
                    <span class="n">systemProperty</span> <span class="s">"spring.profiles.active"</span><span class="o">,</span> <span class="s">"automation"</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="n">finalizedBy</span><span class="o">(</span><span class="s">"bootRun"</span><span class="o">)</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// application-automation.yml</span>
<span class="nl">spring:</span>
  <span class="nl">config:</span>
    <span class="kn">import</span><span class="err">:</span> <span class="nn">application</span><span class="o">-</span><span class="n">local</span><span class="o">.</span><span class="na">yml</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@Profile</span><span class="o">({</span><span class="s">"automation"</span><span class="o">,</span> <span class="s">"feature"</span><span class="o">})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MockConfig</span> <span class="o">{</span>

    <span class="nd">@Bean</span>
    <span class="nd">@Primary</span>
    <span class="kd">public</span> <span class="nc">FeignUtility</span> <span class="nf">feignUtility</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">FeignUtilityMock</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//실제 Feign client interface</span>
<span class="nd">@FeignClient</span><span class="o">(</span>
        <span class="n">name</span> <span class="o">=</span> <span class="s">"feignUtility"</span><span class="o">,</span>
        <span class="n">url</span> <span class="o">=</span> <span class="s">"${feign.url}"</span><span class="o">,</span>
        <span class="n">primary</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">FeignUtility</span> <span class="o">{</span>
    <span class="nd">@PostMapping</span><span class="o">(</span><span class="n">path</span> <span class="o">=</span> <span class="s">"/member"</span><span class="o">)</span>
    <span class="nc">MemberDTO</span> <span class="nf">getMemberInfo</span><span class="o">(</span>
            <span class="nd">@RequestBody</span> <span class="nc">RequestDTO</span> <span class="n">requestDTO</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
:ET