I"T*<h1 id="스코프-체인">스코프 체인</h1>
<ul>
  <li>C, java 같은 경우, {} 단락이 끝나면, 해당 {} 안에 변수는 사라진다. (gc에 의해..)</li>
  <li>js 에서는 그렇지 않다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">value1</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">printFunc</span><span class="p">(){</span>
    <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">value2</span><span class="dl">"</span><span class="p">;</span>

    <span class="kd">function</span> <span class="nx">printValue</span><span class="p">(){</span>
        <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">printValue</span><span class="p">());</span>
<span class="p">}</span>
<span class="nx">printFunc</span><span class="p">();</span>
</code></pre></div></div>

<ol>
  <li>전역 실행 컨텍스트 [[scope]]에 전역 객체 생성</li>
  <li>printFunc 실행</li>
  <li>printFunc 실행 컨텍스트 [[scope]] = 전역 객체 + printFunc 변수 객체 생성</li>
  <li>printValue 실행</li>
  <li>printValue 실행 컨텍스트 [[scope]] = 전역 객체 + printFunc 변수 객체 + printValue 변수 객체</li>
  <li>printValue에서 value 찾았는데 printValue에는 없으니, printFunc 변수 객체에서 찾음.</li>
</ol>

<ul>
  <li>각 함수 객체는 [[scope]] 프로퍼티로 현재 컨텍스트의 스코프 체인을 참조한다.</li>
  <li>한 함수가 실행되면, 자신이 사용할 스코프 체인을 만든다. <strong>현재 실행되는 함수 객체의 [[scope]]프로퍼티를 복사하고, 새롭게 생성된 변수 객체를 해당 체인의 제일 앞에 추가</strong></li>
  <li>정리하자면, 스코프 체인 = 현재 실행 컨텍스트의 변수 객체 + 상위 컨텍스트의 스코프 체인</li>
</ul>

<h2 id="중요한-예제">중요한 예제…</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">value1</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">printValue</span><span class="p">(){</span>
    <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">printFunc</span><span class="p">(</span><span class="nx">func</span><span class="p">){</span>
    <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">value2</span><span class="dl">"</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">func</span><span class="p">());</span>
<span class="p">}</span>

<span class="nx">printFunc</span><span class="p">(</span><span class="nx">printValue</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li><strong>중요한것은,, 함수가 생성될때의 실행컨텍스트가 무엇인지 확인하는것</strong></li>
  <li>printValue가 생성될때의 실행컨텍스트는 전역 실행 컨텍스트이다.</li>
  <li>printValue 메소드의 [[scope]] = 전역 객체 + printValue 객체</li>
  <li>printValue 가 printFunc 안에서 실행된다 하더라고, 이 스코프는 변하지 않는다.</li>
</ul>

<h1 id="클로저">클로저</h1>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">outerFunc</span><span class="p">(){</span>
    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">innerFunc</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);}</span>
    <span class="k">return</span> <span class="nx">innerFunc</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">inner</span> <span class="o">=</span> <span class="nx">outerFunc</span><span class="p">();</span>
<span class="nx">inner</span><span class="p">();</span>
</code></pre></div></div>

<ul>
  <li>여기서 inner가 참조하고 있는 innerFunc은 outerFunc의 실행이 종료된 후 실행된다.</li>
  <li>스코프체인의 개념을 생각해보면, outerFunc의 컨텍스트에 x와 innnerFunc가 있고, outerFunc가 종료되어도, outerFunc의 변수 객체는 여전히 남아있다.</li>
  <li>이미 생명 주기가 끝난 외부 함수의 변수를 참조하는 함수를 클로저라고 한다.</li>
</ul>

<h2 id="클로저-활용">클로저 활용</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">HelloFunc</span><span class="p">(</span><span class="nx">func</span><span class="p">){</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">greeting</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">HelloFunc</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">call</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">func</span><span class="p">){</span>
    <span class="nx">func</span> <span class="p">?</span> <span class="nx">func</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">greeting</span><span class="p">)</span> <span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">func</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">greeting</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">userFunc</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">greeting</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">greeting</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">objHello</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">helloFunc</span><span class="p">();</span>
<span class="nx">objHello</span><span class="p">.</span><span class="nx">func</span> <span class="o">=</span> <span class="nx">userFunc</span><span class="p">;</span>
<span class="nx">objHello</span><span class="p">.</span><span class="nx">call</span><span class="p">();</span>
</code></pre></div></div>

<ol>
  <li>HelloFunc.prototype.call 에 함수를 참조시킴</li>
  <li>HelloFunc 사용자가 userFunc 함수 만듦.</li>
  <li>사용자가 objHello 객체 생성,</li>
  <li>사용자가 objHello.func 이라는 프로퍼티에 사용자가 정의한 userFunc을 참조시킴</li>
  <li>objHello.call() 하면, 사용자가 정의한 userFunc이 실행됨.</li>
</ol>

<ul>
  <li>여기에 사용자가 원하는 인자를 넣어서 HelloFunc()를 이용하려면?<br />
~~~javascript</li>
</ul>

<p>function saySomething(obj, methodName, name){<br />
    return(function(greeting){<br />
        retrun obj<a href="greeting,name">methodName</a>;<br />
    });<br />
}<br />
– 객체[] 로 객체의 프로퍼티를 참조할수 있음.</p>

<p>function newObj(obj,name){<br />
    obj.func = saySomething(this, “who”,name);<br />
    return obj;<br />
}</p>

<p>newObj.prototype.who = function(greeting, name){<br />
    console.log(greeting + “ “ + (name || “everyone”));<br />
}</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
- newObj 함수는 HelloFunc의 객체를 좀더 자유롭게 활요하려고 정의한 함수다.
- 첫번째 인자 obj가 helloFunc이 되고, 두 번째 인자가 사용자가 출력을 원하는 사람이 된다.

~~~javascript
var obj1 = new newObj(objHello,"zzoon");
obj1.call();
</code></pre></div></div>

<ul>
  <li>이런 방식으로, 사용자가 정의함 함수를 실행시키는 메소드를 적절히 사용할 수 있다.</li>
</ul>

<h3 id="루프-안에서-클로저를-활용할-때-주의-하자">루프 안에서 클로저를 활용할 때 주의 하자</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">countSeconds</span><span class="p">(</span><span class="nx">howMany</span><span class="p">){</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">howMany</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
        <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
        <span class="p">},</span> <span class="nx">i</span><span class="o">*</span><span class="mi">1000</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>
<span class="nx">countSeconds</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>이렇게 하면, setTimeout 이 function을 실행시키는 시점은 for문이 다 종료되고, countSeconds 메소드가 다 종료 되었을때이다.</li>
  <li>그러면, i는 무슨 값을 가질까? i=4</li>
  <li>1초때 4 , 2초때 4, 3초때 4 이렇게 1초 간격을 두고 4를 3번 출력한다.</li>
</ul>

:ET