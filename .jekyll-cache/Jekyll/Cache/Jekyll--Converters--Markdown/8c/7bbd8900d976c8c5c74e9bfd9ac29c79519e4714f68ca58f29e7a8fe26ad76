I"G5<h1 id="생성자에-매개변수가-많다면-빌더를-고려하라">생성자에 매개변수가 많다면 빌더를 고려하라</h1>

<h2 id="점층적-생성자-패턴">점층적 생성자 패턴</h2>
<ul>
  <li>필드가 여러개가 있고, 생성자에서 해당 필드를 선택적으로 받아서 객체를 생성한다고 할때,</li>
  <li>선택적으로 받는 매개변수의 갯수 마다 생성자를 따로 만들어줘야한다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nf">NutritionFacts</span><span class="o">(</span><span class="kt">int</span> <span class="n">servingSize</span><span class="o">,</span> <span class="kt">int</span> <span class="n">servings</span><span class="o">){</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="nf">NutritionFacts</span><span class="o">(</span><span class="kt">int</span> <span class="n">servingSize</span><span class="o">,</span> <span class="kt">int</span> <span class="n">servings</span><span class="o">,</span> <span class="kt">int</span> <span class="n">calories</span><span class="o">){</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="nf">NutritionFacts</span><span class="o">(</span><span class="kt">int</span> <span class="n">servingSize</span><span class="o">,</span> <span class="kt">int</span> <span class="n">servings</span><span class="o">,</span> <span class="kt">int</span> <span class="n">calories</span><span class="o">,</span> <span class="kt">int</span> <span class="n">fat</span><span class="o">,</span> <span class="kt">int</span> <span class="n">sodium</span><span class="o">){</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="nf">NutritionFacts</span><span class="o">(</span><span class="kt">int</span> <span class="n">servingSize</span><span class="o">,</span> <span class="kt">int</span> <span class="n">servings</span><span class="o">,</span> <span class="kt">int</span> <span class="n">calories</span><span class="o">,</span> <span class="kt">int</span> <span class="n">fat</span><span class="o">,</span> <span class="kt">int</span> <span class="n">sodium</span><span class="o">,</span> <span class="kt">int</span> <span class="n">carbohydrate</span><span class="o">){</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>너무 많은 생성자가 발생한다.</li>
</ul>

<h2 id="자바-빈즈-패턴">자바 빈즈 패턴</h2>
<ul>
  <li>setter를 이용하여, 필드를 초기화 해준다.
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">NutritionFacts</span> <span class="n">cocaCola</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">NutritionFacts</span><span class="o">();</span>
<span class="n">cocaCola</span><span class="o">.</span><span class="na">setServingSize</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
<span class="n">cocaCola</span><span class="o">.</span><span class="na">setServing</span><span class="o">(</span><span class="mi">200</span><span class="o">);</span>
<span class="n">cocaCola</span><span class="o">.</span><span class="na">setSodium</span><span class="o">(</span><span class="mi">450</span><span class="o">);</span>
</code></pre></div>    </div>
  </li>
  <li>이렇에 하면,메서드를 여러개 호출해야 한다.</li>
  <li>객체가 완전히 생성되기 전에 해당 객체를 사용하면, 일관성이 무너진 상태에 놓여, 버그를 유발할 수 있다.</li>
  <li>자바빈즈 패턴에서는 클래스를 불변(아이템 17)으로 만들 수 없으며, 스레드 안전성을 얻으려면 프로그래머의 추가 작업이 필요하다.</li>
  <li>객체 생성이 끝나면 freeze 하고, 얼리기 전에 사용할 수 없도록 할 수 있지만, 다루기 어려워서 사용되지 않는다.</li>
</ul>

<h2 id="대안-빌더-패턴">대안, 빌더 패턴</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 코드 2-3 빌더 패턴 - 점층적 생성자 패턴과 자바빈즈 패턴의 장점만 취했다. (17~18쪽)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">NutritionFacts</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">servingSize</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">servings</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">calories</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">fat</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">sodium</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">carbohydrate</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Builder</span> <span class="o">{</span>
        <span class="c1">// 필수 매개변수</span>
        <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">servingSize</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">servings</span><span class="o">;</span>

        <span class="c1">// 선택 매개변수 - 기본값으로 초기화한다.</span>
        <span class="kd">private</span> <span class="kt">int</span> <span class="n">calories</span>      <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kt">int</span> <span class="n">fat</span>           <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kt">int</span> <span class="n">sodium</span>        <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kt">int</span> <span class="n">carbohydrate</span>  <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="kd">public</span> <span class="nf">Builder</span><span class="o">(</span><span class="kt">int</span> <span class="n">servingSize</span><span class="o">,</span> <span class="kt">int</span> <span class="n">servings</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">servingSize</span> <span class="o">=</span> <span class="n">servingSize</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">servings</span>    <span class="o">=</span> <span class="n">servings</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="nc">Builder</span> <span class="nf">calories</span><span class="o">(</span><span class="kt">int</span> <span class="n">val</span><span class="o">)</span>
        <span class="o">{</span> <span class="n">calories</span> <span class="o">=</span> <span class="n">val</span><span class="o">;</span>      <span class="k">return</span> <span class="k">this</span><span class="o">;</span> <span class="o">}</span>
        <span class="kd">public</span> <span class="nc">Builder</span> <span class="nf">fat</span><span class="o">(</span><span class="kt">int</span> <span class="n">val</span><span class="o">)</span>
        <span class="o">{</span> <span class="n">fat</span> <span class="o">=</span> <span class="n">val</span><span class="o">;</span>           <span class="k">return</span> <span class="k">this</span><span class="o">;</span> <span class="o">}</span>
        <span class="kd">public</span> <span class="nc">Builder</span> <span class="nf">sodium</span><span class="o">(</span><span class="kt">int</span> <span class="n">val</span><span class="o">)</span>
        <span class="o">{</span> <span class="n">sodium</span> <span class="o">=</span> <span class="n">val</span><span class="o">;</span>        <span class="k">return</span> <span class="k">this</span><span class="o">;</span> <span class="o">}</span>
        <span class="kd">public</span> <span class="nc">Builder</span> <span class="nf">carbohydrate</span><span class="o">(</span><span class="kt">int</span> <span class="n">val</span><span class="o">)</span>
        <span class="o">{</span> <span class="n">carbohydrate</span> <span class="o">=</span> <span class="n">val</span><span class="o">;</span>  <span class="k">return</span> <span class="k">this</span><span class="o">;</span> <span class="o">}</span>

        <span class="kd">public</span> <span class="nc">NutritionFacts</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">NutritionFacts</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nf">NutritionFacts</span><span class="o">(</span><span class="nc">Builder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">servingSize</span>  <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">servingSize</span><span class="o">;</span>
        <span class="n">servings</span>     <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">servings</span><span class="o">;</span>
        <span class="n">calories</span>     <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">calories</span><span class="o">;</span>
        <span class="n">fat</span>          <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">fat</span><span class="o">;</span>
        <span class="n">sodium</span>       <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">sodium</span><span class="o">;</span>
        <span class="n">carbohydrate</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">carbohydrate</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">NutritionFacts</span> <span class="n">cocaCola</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">NutritionFacts</span><span class="o">.</span><span class="na">Builder</span><span class="o">(</span><span class="mi">240</span><span class="o">,</span> <span class="mi">8</span><span class="o">)</span>
                <span class="o">.</span><span class="na">calories</span><span class="o">(</span><span class="mi">100</span><span class="o">).</span><span class="na">sodium</span><span class="o">(</span><span class="mi">35</span><span class="o">).</span><span class="na">carbohydrate</span><span class="o">(</span><span class="mi">27</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>클라이언트는 필수 매개변수만으로 생성자 혹은 정적 팩터리를 호출해 빌더 객체를 얻는다.</li>
  <li>이후 선택전 매개변수를 빌더를 반환하는 메서드를 이용하여, 설정한다.</li>
  <li>이후 build하여, 최종 얻고자하는 객체를 뽑아낸다.</li>
</ul>

<h3 id="빌더패턴의-불변성">빌더패턴의 불변성</h3>
<ul>
  <li>빌더 패턴과 자바 빈즈 패턴의 가장 큰 차이점은 불변성이다.</li>
  <li>자바 빈즈 패턴은 객체를 생성한 후, setter를 사용하여 필드 값을 넣는다.</li>
  <li>빌더 패턴은, 객체 생성전, builder를 사용하여 값을 넣고, build 메서드를 사용하여 객체를 사용한다.</li>
  <li>그렇기 때문에, 빌더 패턴 사용시 해당 객체에는 public setter를 절대 만들면 안된다.</li>
</ul>

<h3 id="빌더패턴-장단점">빌더패턴 장단점</h3>

<h4 id="장점">장점</h4>
<ul>
  <li>클라이언트가 작성하기 쉽고, 가독성도 높아진다.(메서드 체인, fluent API)</li>
  <li>빌더 패턴은 계층적으로 설계된 클래스와 함께 쓰기에 좋다.(https://github.com/WegraLee/effective-java-3e-source-code/tree/master/src/effectivejava/chapter2/item2/hierarchicalbuilder)</li>
</ul>

<h4 id="단점">단점</h4>
<ul>
  <li>빌더 부터 만들어야 하기 때문에, 성능에 문제가 발생 할 수 있다.</li>
  <li>인자가 충분히 많을때 효과적이다.</li>
  <li>앞으로 인자가 늘어날걸 대비해, 애초에 빌더패턴을 사용하는게 나을수 있다.</li>
</ul>
:ET